/**
 * @file test_wcc_random.c
 * @author Kealan McCusker
 * @brief Test WCC with two TAs and time permits for random values
 *
 * LICENSE
 *
 * Licensed to the Apache Software Foundation (ASF) under one
 * or more contributor license agreements.  See the NOTICE file
 * distributed with this work for additional information
 * regarding copyright ownership.  The ASF licenses this file
 * to you under the Apache License, Version 2.0 (the
 * "License"); you may not use this file except in compliance
 * with the License.  You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing,
 * software distributed under the License is distributed on an
 * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
 * KIND, either express or implied.  See the License for the
 * specific language governing permissions and limitations
 * under the License.
 */

/* Test WCC with two TAs and time permits for random values */

#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include <time.h>
#include "randapi.h"
#include "wcc_ZZZ.h"
#include "config_test.h"

// #define DEBUG

int main()
{

    /* Master secret */
    char ms[WCC_PGS_ZZZ];
    octet MS= {sizeof(ms),sizeof(ms),ms};

    // Sender key
    char akeyG1[2*WCC_PFS_ZZZ+1];
    octet AKeyG1= {0,sizeof(akeyG1), akeyG1};

    // Receiver key
    char bkeyG2[4*WCC_PFS_ZZZ];
    octet BKeyG2= {0,sizeof(bkeyG2), bkeyG2};

    // Sender time permits
    char aTPG1[2*WCC_PFS_ZZZ+1];
    octet ATPG1= {0,sizeof(aTPG1), aTPG1};

    // Receiver time permits;
    char bTPG2[4*WCC_PFS_ZZZ];
    octet BTPG2= {0,sizeof(bTPG2), bTPG2};

    // Idenitities
    char hv[WCC_PFS_ZZZ],alice_id[256],bob_id[256];
    octet HV= {0,sizeof(hv),hv};

    octet IdA= {0,sizeof(alice_id),alice_id};
    octet IdB= {0,sizeof(bob_id),bob_id};

    // Ephemeral parameters
    char x[WCC_PGS_ZZZ];
    octet X= {0,sizeof(x),x};
    char y[WCC_PGS_ZZZ];
    octet Y= {0,sizeof(y),y};
    char w[WCC_PGS_ZZZ];
    octet W= {0,sizeof(w),w};
    char pia[WCC_PGS_ZZZ];
    octet PIA= {0,sizeof(pia),pia};
    char pib[WCC_PGS_ZZZ];
    octet PIB= {0,sizeof(pib),pib};

    char pgg1[2*WCC_PFS_ZZZ+1];
    octet PgG1= {0,sizeof(pgg1), pgg1};
    char pag1[2*WCC_PFS_ZZZ+1];
    octet PaG1= {0,sizeof(pag1), pag1};
    char pbg2[4*WCC_PFS_ZZZ];
    octet PbG2= {0,sizeof(pbg2), pbg2};

    // Invalid points
    char invalidG1[2*WCC_PFS_ZZZ+1];
    octet InvalidG1= {0,sizeof(invalidG1), invalidG1};

    char invalidG2[4*WCC_PFS_ZZZ];
    octet InvalidG2= {0,sizeof(invalidG2), invalidG2};

    // Session keys
    char k1[WCC_PAS];
    octet K1= {0,sizeof(k1),k1};
    char k2[WCC_PAS];
    octet K2= {0,sizeof(k2),k2};

    char seed[32] = {0};
    octet SEED = {0,sizeof(seed),seed};
    csprng RNG;

    int i, rtn, date, hash;

    int hashDoneOn = 1;
    int hashDoneOff = 0;

    date = today();
    hash = SHA256;

    /* unrandom seed value! */
    SEED.len=32;
    for (i=0; i<32; i++) SEED.val[i]=i+1;

    /* initialise random number generator */
    CREATE_CSPRNG(&RNG,&SEED);

    /* TA: Generate master secret  */
    WCC_ZZZ_RANDOM_GENERATE(&RNG,&MS);

    // TA: Generate Alices's sender key
    OCT_jstring(&IdA,"alice@miracl.com");
    HASH_ID(hash,&IdA,&HV);
    WCC_ZZZ_GET_G1_MULTIPLE(hash,hashDoneOn,&MS,&HV,&AKeyG1);

    // TA: Generate Alice's G1 time permit
    WCC_ZZZ_GET_G1_PERMIT(HASH_TYPE_WCC_ZZZ,date,&MS,&HV,&ATPG1);

    // TA: Generate Bob's receiver key
    OCT_jstring(&IdB,"bob@miracl.com");
    HASH_ID(hash,&IdB,&HV);
    WCC_ZZZ_GET_G2_MULTIPLE(hash,hashDoneOn,&MS,&HV,&BKeyG2);

    // TA: Generate Bob's G2 time permit
    WCC_ZZZ_GET_G2_PERMIT(HASH_TYPE_WCC_ZZZ,date,&MS,&HV,&BTPG2);

    // Generate ephemeral parameters
    WCC_ZZZ_RANDOM_GENERATE(&RNG,&X);
    WCC_ZZZ_GET_G1_TPMULT(HASH_TYPE_WCC_ZZZ,date,&X,&IdA,&PaG1);

    WCC_ZZZ_RANDOM_GENERATE(&RNG,&W);
    WCC_ZZZ_GET_G1_TPMULT(HASH_TYPE_WCC_ZZZ,date,&W,&IdA,&PgG1);

    WCC_ZZZ_RANDOM_GENERATE(&RNG,&Y);
    WCC_ZZZ_GET_G2_TPMULT(HASH_TYPE_WCC_ZZZ,date,&Y,&IdB,&PbG2);

    WCC_ZZZ_Hq(hash,&PaG1,&PbG2,&PgG1,&IdB,&PIA);
    WCC_ZZZ_Hq(hash,&PbG2,&PaG1,&PgG1,&IdA,&PIB);

    /* Check that the functions work with valid points */
    rtn = WCC_ZZZ_SENDER_KEY(HASH_TYPE_WCC_ZZZ,date, &X, &PIA, &PIB, &PbG2, &PgG1, &AKeyG1, &ATPG1, &IdB, &K1);
    if (rtn != WCC_OK)
    {
        printf("FAILURE Check sender with valid points\n");
        return 1;
    }

    rtn = WCC_ZZZ_RECEIVER_KEY(HASH_TYPE_WCC_ZZZ,date, &Y, &W,  &PIA, &PIB,  &PaG1, &PgG1, &BKeyG2, &BTPG2, &IdA, &K2);
    if (rtn != WCC_OK)
    {
        printf("FAILURE Check receiver with valid points\n");
        return 1;
    }

    if (!OCT_ncomp(&K1,&K2,WCC_PAS))
    {
        printf("FAILURE Keys do not match\n");
        return 1;
    }

    // Generate invalid points
    OCT_rand(&InvalidG1,&RNG,InvalidG1.max);
    OCT_rand(&InvalidG2,&RNG,InvalidG2.max);
    invalidG1[0] = '\x04';

    /* Check handling of invalid points */

    // Invalid Sender PbG2
    rtn = WCC_ZZZ_SENDER_KEY(HASH_TYPE_WCC_ZZZ,date, &X, &PIA, &PIB, &InvalidG2, &PgG1, &AKeyG1, &ATPG1, &IdB, &K1);
    if (rtn != WCC_INVALID_POINT)
    {
        printf("FAILURE Handle invalid PbG2: 51 != %d\n", rtn);
        return 1;
    }

    // Invalid Sender PgG1
    rtn = WCC_ZZZ_SENDER_KEY(HASH_TYPE_WCC_ZZZ,date, &X, &PIA, &PIB, &PbG2, &InvalidG1, &AKeyG1, &ATPG1, &IdB, &K1);
    if (rtn != WCC_INVALID_POINT)
    {
        printf("FAILURE Handle invalid PgG1: 51 != %d\n", rtn);
        return 1;
    }

    // Invalid Sender AKeyG1
    rtn = WCC_ZZZ_SENDER_KEY(HASH_TYPE_WCC_ZZZ,date, &X, &PIA, &PIB, &PbG2, &PgG1, &InvalidG1, &ATPG1, &IdB, &K1);
    if (rtn != WCC_INVALID_POINT)
    {
        printf("FAILURE Handle invalid AKeyG1: 51 != %d\n", rtn);
        return 1;
    }

    // Invalid Sender ATPG1
    rtn = WCC_ZZZ_SENDER_KEY(HASH_TYPE_WCC_ZZZ,date, &X, &PIA, &PIB, &PbG2, &PgG1, &AKeyG1, &InvalidG1, &IdB, &K1);
    if (rtn != WCC_INVALID_POINT)
    {
        printf("FAILURE Handle invalid ATPG1: 51 != %d\n", rtn);
        return 1;
    }

    // Invalid Receiver PaG1
    rtn = WCC_ZZZ_RECEIVER_KEY(HASH_TYPE_WCC_ZZZ,date, &Y, &W,  &PIA, &PIB,  &InvalidG1, &PgG1, &BKeyG2, &BTPG2, &IdA, &K2);
    if (rtn != WCC_INVALID_POINT)
    {
        printf("FAILURE Handle invalid PaG1: 51 != %d\n", rtn);
        return 1;
    }

    // Invalid Receiver PgG1
    rtn = WCC_ZZZ_RECEIVER_KEY(HASH_TYPE_WCC_ZZZ,date, &Y, &W,  &PIA, &PIB,  &PaG1, &InvalidG1, &BKeyG2, &BTPG2, &IdA, &K2);
    if (rtn != WCC_INVALID_POINT)
    {
        printf("FAILURE Handle invalid PgG1: 51 != %d\n", rtn);
        return 1;
    }

    // Invalid Receiver BKeyG2
    rtn = WCC_ZZZ_RECEIVER_KEY(HASH_TYPE_WCC_ZZZ,date, &Y, &W,  &PIA, &PIB,  &PaG1, &PgG1, &InvalidG2, &BTPG2, &IdA, &K2);
    if (rtn != WCC_INVALID_POINT)
    {
        printf("FAILURE Handle invalid BKeyG2: 51 != %d\n", rtn);
        return 1;
    }

    // Invalid Receiver BTPG2
    rtn = WCC_ZZZ_RECEIVER_KEY(HASH_TYPE_WCC_ZZZ,date, &Y, &W,  &PIA, &PIB,  &PaG1, &PgG1, &BKeyG2, &InvalidG2, &IdA, &K2);
    if (rtn != WCC_INVALID_POINT)
    {
        printf("FAILURE Handle invalid BTPG2: 51 != %d\n", rtn);
        return 1;
    }

    KILL_CSPRNG(&RNG);
    printf("SUCCESS\n");
    return 0;
}
